import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from matplotlib.ticker import FormatStrFormatter  # 用于设置 Y 轴坐标格式

# 设置支持中文的字体
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

# 数据（从 Excel 文件中提取，Y 值已放大 10,000 倍）
data = pd.DataFrame({
    -2: [0] * 60,
    -1: [0] * 60,
    0: [0] * 60,
    1: [-2.75209, -3.35377, -3.51064, -3.38677, -2.85166, -1.29463, -1.53578, -1.61998, -1.55106, -1.32415, -0.596514, -0.668985, -0.696549, -0.673668, -0.604985, -0.309616, -0.336506, -0.346627, -0.33816, -0.312621, -0.165134, -0.176607, -0.180831, -0.177248, -0.166327, -0.0852474, -0.0903907, -0.092255, -0.0832361, -0.0787265, -13.4194, -16.0836, -16.9497, -16.2191, -13.7088, -9.52839, -11.0659, -11.6394, -11.1661, -9.71341, -5.1677, -5.75838, -5.98212, -5.79545, -5.24171, -2.79176, -3.0269, -3.11701, -3.04277, -2.81806, -1.50924, -1.6138, -1.65201, -1.61878, -1.51968, -0.782853, -0.83022, -0.847096, -0.832361, -0.787265],
    2: [-0.839471, -0.996245, -1.07149, -1.00719, -0.845101, -2.72653, -3.31422, -3.46825, -3.34526, -2.82358, -1.31872, -1.56542, -1.65031, -1.58053, -1.3503, -0.607652, -0.681104, -0.709152, -0.685861, -0.616255, -0.311273, -0.338422, -0.348635, -0.34008, -0.314313, -0.157934, -0.169091, -0.173208, -0.169725, -0.159101, -7.93693, -9.0242, -9.48042, -9.09949, -8.10307, -12.9209, -15.3265, -16.2124, -15.5073, -13.2274, -9.55282, -11.0674, -11.6413, -11.1676, -9.73666, -5.21682, -5.80361, -6.03083, -5.84667, -5.28483, -2.7896, -3.02817, -3.11699, -3.04097, -2.81509, -1.4363, -1.53737, -1.57399, -1.54258, -1.44675],
    3: [0.0391486, 0.0552499, 0.0577189, 0.0559225, 0.0423627, -0.049869, -0.05832, -0.0632461, -0.0588932, -0.0495623, -0.259867, -0.316865, -0.331437, -0.319667, -0.269172, -0.126829, -0.151388, -0.159642, -0.152716, -0.129991, -0.0569688, -0.0641392, -0.0668821, -0.0646042, -0.0578164, -0.0276606, -0.0301977, -0.031157, -0.029706, -0.0279479, -0.00194169, 0.00376983, 0.0051444, 0.00392461, -0.00127418, -0.0534612, -0.0594899, -0.0617794, -0.0597189, -0.05417, -0.117282, -0.139514, -0.147915, -0.140881, -0.119558, -0.0897363, -0.104543, -0.109909, -0.105595, -0.0915731, -0.0484811, -0.054222, -0.0563936, -0.0545753, -0.0491236, -0.0246264, -0.0268422, -0.0276625, -0.0269706, -0.024877],
    4: [0.330513, 0.410129, 0.442692, 0.432425, 0.362641, 0.264482, 0.34008, 0.392122, 0.403098, 0.328975, 0.10378, 0.155021, 0.225352, 0.237066, 0.17206, -0.165986, -0.198124, -0.192334, -0.179851, -0.149761, -0.0759932, -0.0935743, -0.0975528, -0.090622, -0.0723176, -0.0279833, -0.0324092, -0.0336929, -0.0315612, -0.026522, 0.18448, 0.222377, 0.239251, 0.232556, 0.200449, 0.15993, 0.19829, 0.220586, 0.218078, 0.187016, 0.0672371, 0.0887721, 0.10755, 0.109564, 0.0935435, -0.0387336, -0.0464602, -0.0445824, -0.0374867, -0.0273043, -0.0444627, -0.0534871, -0.0555824, -0.0514939, -0.0409496, -0.0223095, -0.0256616, -0.0265727, -0.0249187, -0.0210424],
    5: [0.273835, 0.321047, 0.322597, 0.295413, 0.24891, 0.33036, 0.382036, 0.358781, 0.302338, 0.26887, 0.21918, 0.243475, 0.21638, 0.209632, 0.200273, 0.0683024, 0.0987077, 0.14882, 0.157129, 0.107417, -0.185356, -0.223066, -0.220391, -0.209054, -0.177006, -0.085812, -0.105462, -0.110685, -0.104166, -0.0848285, 0.162018, 0.184981, 0.188073, 0.175068, 0.149545, 0.181149, 0.20497, 0.204774, 0.187535, 0.160655, 0.129657, 0.147167, 0.148784, 0.14026, 0.121945, 0.0394805, 0.0499761, 0.0585105, 0.0587317, 0.0492388, -0.054848, -0.0665347, -0.0676325, -0.0615311, -0.0494208, -0.0521417, -0.0628272, -0.0660668, -0.0620885, -0.0510463],
    6: [0.282524, 0.33638, 0.356033, 0.344949, 0.293624, 0.357757, 0.423528, 0.442277, 0.425958, 0.358226, 0.37038, 0.422198, 0.388346, 0.318854, 0.302064, 0.242205, 0.265878, 0.235712, 0.226733, 0.219752, 0.0849062, 0.116765, 0.166464, 0.174576, 0.12407, -0.171729, -0.208336, -0.204994, -0.193475, -0.163032, 0.180099, 0.207848, 0.218059, 0.209787, 0.183035, 0.223075, 0.255891, 0.265366, 0.25201, 0.218407, 0.21543, 0.2415, 0.240917, 0.222076, 0.194466, 0.149495, 0.167371, 0.168351, 0.158935, 0.140525, 0.0535687, 0.0643863, 0.0730528, 0.0734982, 0.0629154, -0.0434333, -0.0540085, -0.054318, -0.048648, -0.0375069],
    7: [0.285447, 0.337021, 0.353377, 0.340212, 0.292448, 0.359571, 0.424326, 0.446855, 0.432957, 0.370735, 0.398484, 0.463205, 0.480168, 0.478068, 0.403407, 0.408454, 0.461621, 0.433393, 0.380197, 0.349885, 0.297582, 0.320969, 0.307979, 0.295205, 0.258647, 0.25027, 0.27889, 0.280668, 0.263654, 0.23323, 0.185797, 0.213017, 0.222799, 0.214578, 0.188756, 0.237705, 0.272574, 0.285781, 0.275419, 0.241654, 0.260883, 0.29646, 0.307979, 0.295205, 0.258647, 0.25027, 0.27889, 0.280668, 0.263654, 0.23323, 0.197015, 0.219017, 0.221095, 0.211507, 0.189351, 0.134754, 0.159134, 0.172598, 0.168684, 0.145344],
    8: [0.270792, 0.320236, 0.335358, 0.3224, 0.276445, 0.331138, 0.389281, 0.405617, 0.389539, 0.335283, 0.341783, 0.38913, 0.39244, 0.384102, 0.341359, 0.339017, 0.361934, 0.329142, 0.343934, 0.323901, 0.334819, 0.356082, 0.303767, 0.243921, 0.255341, 0.218817, 0.238539, 0.239016, 0.229544, 0.207447, 0.173192, 0.198759, 0.207638, 0.199659, 0.175232, 0.215234, 0.245828, 0.256368, 0.246266, 0.216528, 0.225838, 0.253284, 0.261141, 0.251576, 0.223944, 0.218817, 0.238539, 0.239016, 0.229544, 0.207447, 0.194008, 0.20751, 0.199338, 0.18358, 0.166333, 0.130278, 0.135178, 0.125857, 0.117616, 0.109533],
    9: [0.266755, 0.314229, 0.328014, 0.315004, 0.270069, 0.323956, 0.372981, 0.381124, 0.367889, 0.320678, 0.343005, 0.372982, 0.341696, 0.340921, 0.315553, 0.368977, 0.432172, 0.4357, 0.350267, 0.303635, 0.377153, 0.442724, 0.448484, 0.395156, 0.320179, 0.243841, 0.272876, 0.274755, 0.252107, 0.217393, 0.17028, 0.194476, 0.202384, 0.194267, 0.170423, 0.211716, 0.238242, 0.245617, 0.2354, 0.207867, 0.230226, 0.253768, 0.255465, 0.242568, 0.215711, 0.243841, 0.272876, 0.274755, 0.252107, 0.217393, 0.239307, 0.268914, 0.270706, 0.247269, 0.209642, 0.194571, 0.213864, 0.20752, 0.185673, 0.159581],
    10: [0.288205, 0.339244, 0.354232, 0.339516, 0.291242, 0.366295, 0.43271, 0.449239, 0.419859, 0.357771, 0.404375, 0.487693, 0.514361, 0.438871, 0.377922, 0.409707, 0.493482, 0.538682, 0.539028, 0.446929, 0.383138, 0.465729, 0.51183, 0.511088, 0.427581, 0.302415, 0.373828, 0.411073, 0.393623, 0.32083, 0.188508, 0.215383, 0.224309, 0.215135, 0.188876, 0.243999, 0.279179, 0.289933, 0.275321, 0.240394, 0.273388, 0.314486, 0.327504, 0.308703, 0.269045, 0.278035, 0.322864, 0.343232, 0.332167, 0.290579, 0.255145, 0.298781, 0.320115, 0.311839, 0.272229, 0.194844, 0.228739, 0.244303, 0.235818, 0.204332],
    11: [0] * 60,
    12: [0] * 60,
    13: [0] * 60
}, index=range(1, 61))

# 侧边栏
with st.sidebar:
    st.header("标测电极")
    
    # 标测电极A
    electrode_a = st.slider("标测电极A", 1, 60, 30, 1, key="electrode_a")
    
    # 标测电极B
    electrode_b = st.slider("标测电极B", 1, 60, 30, 1, key="electrode_b")
    
    # 调整 X 轴紧凑度的滑动条
    x_spacing = st.slider(
        "X 轴紧凑度", 
        min_value=0.1, 
        max_value=1.0, 
        value=0.5, 
        step=0.1, 
        key="x_spacing"
    )
    
    # 显示具体数值的按钮
    show_values = st.button("显示具体数值")

# 计算差值
diff_a = data.loc[electrode_a]
diff_b = data.loc[electrode_b]
diff_ab = diff_a - diff_b

# 时间序列图
st.header("时间序列图 (Y 值已放大 10,000 倍)")

# 动态调整图像宽度
fig_width = 10 * x_spacing  # 根据 x_spacing 动态调整图像宽度
fig, (ax_a, ax_b, ax_ab) = plt.subplots(3, 1, figsize=(fig_width, 10))

# 动态调整 X 轴范围
x_values = np.arange(len(data.columns)) * x_spacing  # 根据 x_spacing 调整 X 轴范围

# 电极 A
ax_a.plot(x_values, diff_a, marker="o", markersize=4, linewidth=1.5)
ax_a.set_title(f"{electrode_a}", fontsize=10)
ax_a.set_xlabel("", fontsize=8)
ax_a.set_ylabel("")  # 隐藏 Y 轴标签
ax_a.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))  # Y 轴保留两位小数
ax_a.set_xticks(x_values)  # 设置 X 轴刻度
ax_a.set_xticklabels(data.columns, rotation=90, fontsize=8)  # X 轴标签垂直显示
ax_a.grid(True, linestyle="--", alpha=0.6)

# 电极 B
ax_b.plot(x_values, diff_b, marker="o", markersize=4, linewidth=1.5)
ax_b.set_title(f"{electrode_b}", fontsize=10)
ax_b.set_xlabel("", fontsize=8)
ax_b.set_ylabel("")  # 隐藏 Y 轴标签
ax_b.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))  # Y 轴保留两位小数
ax_b.set_xticks(x_values)  # 设置 X 轴刻度
ax_b.set_xticklabels(data.columns, rotation=90, fontsize=8)  # X 轴标签垂直显示
ax_b.grid(True, linestyle="--", alpha=0.6)

# 电极 A-B
ax_ab.plot(x_values, diff_ab, marker="o", markersize=4, linewidth=1.5)
ax_ab.set_title(f" {electrode_a}-{electrode_b}", fontsize=10)
ax_ab.set_xlabel("", fontsize=8)
ax_ab.set_ylabel("")  # 隐藏 Y 轴标签
ax_ab.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))  # Y 轴保留两位小数
ax_ab.set_xticks(x_values)  # 设置 X 轴刻度
ax_ab.set_xticklabels(data.columns, rotation=90, fontsize=8)  # X 轴标签垂直显示
ax_ab.grid(True, linestyle="--", alpha=0.6)

# 调整子图间距
plt.tight_layout()

# 显示图表
st.pyplot(fig)

# 显示具体数值（横排显示）
if show_values:
    st.subheader("具体数值（横排显示）")
    
    # 将数据转换为横排格式
    df_a = pd.DataFrame({f"{electrode_a}": diff_a}).T
    df_b = pd.DataFrame({f"{electrode_b}": diff_b}).T
    df_ab = pd.DataFrame({f"{electrode_a}-{electrode_b}": diff_ab}).T
    
    # 显示表格
    st.write("电极 A ：")
    st.dataframe(df_a)
    
    st.write("电极 B ：")
    st.dataframe(df_b)
    
    st.write("电极 A-B 差值：")
    st.dataframe(df_ab)
