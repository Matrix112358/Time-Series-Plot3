import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from matplotlib.ticker import FormatStrFormatter

# 设置支持中文的字体
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

# 缓存数据加载
@st.cache_data
def load_data():
    data = pd.DataFrame({
        "标测电极": range(1, 61),
        -2: [0] * 60,
        -1: [0] * 60,
        0: [0] * 60,
        1: [-0.000275209, -0.000335377, -0.000351064, -0.000338677, -0.000285166, -0.000129463, -0.000153578, -0.000161998, -0.000155106, -0.000132415, -5.96514e-05, -6.68985e-05, -6.96549e-05, -6.73668e-05, -6.04985e-05, -3.09616e-05, -3.36506e-05, -3.46627e-05, -3.3816e-05, -3.12621e-05, -1.65134e-05, -1.76607e-05, -1.80831e-05, -1.77248e-05, -1.66327e-05, -8.52474e-06, -9.03907e-06, -9.2255e-06, -9.06511e-06, -8.57341e-06, -0.000134194, -0.000160836, -0.000169497, -0.000162191, -0.000137088, -9.52839e-05, -0.000110659, -0.000116394, -0.000111661, -9.71341e-05, -5.1677e-05, -5.75838e-05, -5.98212e-05, -5.79545e-05, -5.24171e-05, -2.79176e-05, -3.0269e-05, -3.11701e-05, -3.04277e-05, -2.81806e-05, -1.50924e-05, -1.6138e-05, -1.65201e-05, -1.61878e-05, -1.51968e-05, -7.82853e-06, -8.3022e-06, -8.47096e-06, -8.32361e-06, -7.87265e-06],
        2: [-8.39471e-05, -9.96245e-05, -0.000107149, -0.000100719, -8.45101e-05, -0.000272653, -0.000331422, -0.000346825, -0.000334526, -0.000282358, -0.000131872, -0.000156542, -0.000165031, -0.000158053, -0.00013503, -6.07652e-05, -6.81104e-05, -7.09152e-05, -6.85861e-05, -6.16255e-05, -3.11273e-05, -3.38422e-05, -3.48635e-05, -3.4008e-05, -3.14313e-05, -1.57934e-05, -1.69091e-05, -1.73208e-05, -1.69725e-05, -1.59101e-05, -7.93693e-05, -9.0242e-05, -9.48042e-05, -9.09949e-05, -8.10307e-05, -0.000129209, -0.000153265, -0.000162124, -0.000155073, -0.000132274, -9.55282e-05, -0.000110674, -0.000116413, -0.000111676, -9.73666e-05, -5.21682e-05, -5.80361e-05, -6.03083e-05, -5.84667e-05, -5.28483e-05, -2.7896e-05, -3.02817e-05, -3.11699e-05, -3.04097e-05, -2.81509e-05, -1.4363e-05, -1.53737e-05, -1.57399e-05, -1.54258e-05, -1.44675e-05],
        3: [3.91486e-05, 5.52499e-05, 5.77189e-05, 5.59225e-05, 4.23627e-05, -4.9869e-05, -5.832e-05, -6.32461e-05, -5.88932e-05, -4.95623e-05, -0.000259867, -0.000316865, -0.000331437, -0.000319667, -0.000269172, -0.000126829, -0.000151388, -0.000159642, -0.000152716, -0.000129991, -5.69688e-05, -6.41392e-05, -6.68821e-05, -6.46042e-05, -5.78164e-05, -2.76606e-05, -3.01977e-05, -3.1157e-05, -3.03575e-05, -2.79479e-05, -1.94169e-06, 3.76983e-06, 5.1444e-06, 3.92461e-06, -1.27418e-06, -5.34612e-05, -5.94899e-05, -6.17794e-05, -5.97189e-05, -5.417e-05, -0.000117282, -0.000139514, -0.000147915, -0.000140881, -0.000119558, -8.97363e-05, -0.000104543, -0.000109909, -0.000105595, -9.15731e-05, -4.84811e-05, -5.4222e-05, -5.63936e-05, -5.45753e-05, -4.91236e-05, -2.46264e-05, -2.68422e-05, -2.76625e-05, -2.69706e-05, -2.4877e-05],
        4: [0.000330513, 0.000410129, 0.000442692, 0.000432425, 0.000362641, 0.000264482, 0.00034008, 0.000392122, 0.000403098, 0.000328975, 0.00010378, 0.000155021, 0.000225352, 0.000237066, 0.00017206, -0.000165986, -0.000198124, -0.000192334, -0.000179851, -0.000149761, -7.59932e-05, -9.35743e-05, -9.75528e-05, -9.0622e-05, -7.23176e-05, -2.79833e-05, -3.24092e-05, -3.36929e-05, -3.15612e-05, -2.6522e-05, 0.00018448, 0.000222377, 0.000239251, 0.000232556, 0.000200449, 0.00015993, 0.00019829, 0.000220586, 0.000218078, 0.000187016, 6.72371e-05, 8.87721e-05, 0.00010755, 0.000109564, 9.35435e-05, -3.87336e-05, -4.64602e-05, -4.45824e-05, -3.74867e-05, -2.73043e-05, -4.44627e-05, -5.34871e-05, -5.55824e-05, -5.14939e-05, -4.09496e-05, -2.23095e-05, -2.56616e-05, -2.65727e-05, -2.49187e-05, -2.10424e-05],
        5: [0.000273835, 0.000321047, 0.000322597, 0.000295413, 0.00024891, 0.00033036, 0.000382036, 0.000358781, 0.000302338, 0.00026887, 0.00021918, 0.000243475, 0.00021638, 0.000209632, 0.000200273, 6.83024e-05, 9.87077e-05, 0.00014882, 0.000157129, 0.000107417, -0.000185356, -0.000223066, -0.000220391, -0.000209054, -0.000177006, -8.5812e-05, -0.000105462, -0.000110685, -0.000104166, -8.48285e-05, 0.000162018, 0.000184981, 0.000188073, 0.000175068, 0.000149545, 0.000181149, 0.00020497, 0.000204774, 0.000187535, 0.000160655, 0.000129657, 0.000147167, 0.000148784, 0.00014026, 0.000121945, 3.94805e-05, 4.99761e-05, 5.85105e-05, 5.87317e-05, 4.92388e-05, -5.4848e-05, -6.65347e-05, -6.76325e-05, -6.15311e-05, -4.94208e-05, -5.21417e-05, -6.28272e-05, -6.60668e-05, -6.20885e-05, -5.10463e-05],
        6: [0.000282524, 0.00033638, 0.000356033, 0.000344949, 0.000293624, 0.000357757, 0.000423528, 0.000442277, 0.000425958, 0.000358226, 0.00037038, 0.000422198, 0.000388346, 0.000318854, 0.000302064, 0.000242205, 0.000265878, 0.000235712, 0.000226733, 0.000219752, 8.49062e-05, 0.000116765, 0.000166464, 0.000174576, 0.00012407, -0.000171729, -0.000208336, -0.000204994, -0.000193475, -0.000163032, 0.000180099, 0.000207848, 0.000218059, 0.000209787, 0.000183035, 0.000223075, 0.000255891, 0.000265366, 0.00025201, 0.000218407, 0.00021543, 0.0002415, 0.000240917, 0.000222076, 0.000194466, 0.000149495, 0.000167371, 0.000168351, 0.000158935, 0.000140525, 5.35687e-05, 6.43863e-05, 7.30528e-05, 7.34982e-05, 6.29154e-05, -4.34333e-05, -5.40085e-05, -5.4318e-05, -4.8648e-05, -3.75069e-05],
        7: [0.000285447, 0.000337021, 0.000353377, 0.000340212, 0.000292448, 0.000359571, 0.000424326, 0.000446855, 0.000432957, 0.000370735, 0.000398484, 0.000463205, 0.000480168, 0.000478068, 0.000403407, 0.000408454, 0.000461621, 0.000433393, 0.000380197, 0.000349885, 0.000297582, 0.000320969, 0.000278978, 0.000282019, 0.00027625, 0.0001986, 0.000251702, 0.000307085, 0.000309884, 0.000239847, 0.000185797, 0.000213017, 0.000222799, 0.000214578, 0.000188756, 0.000237705, 0.000272574, 0.000285781, 0.000275419, 0.000241654, 0.000260883, 0.00029646, 0.000307979, 0.000295205, 0.000258647, 0.00025027, 0.00027889, 0.000280668, 0.000263654, 0.00023323, 0.000197015, 0.000219017, 0.000221095, 0.000211507, 0.000189351, 0.000134754, 0.000159134, 0.000172598, 0.000168684, 0.000145344],
        8: [0.000270792, 0.000320236, 0.000335358, 0.0003224, 0.000276445, 0.000331138, 0.000389281, 0.000405617, 0.000389539, 0.000335283, 0.000341783, 0.00038913, 0.00039244, 0.000384102, 0.000341359, 0.000339017, 0.000361934, 0.000329142, 0.000343934, 0.000323901, 0.000334819, 0.000356082, 0.000303767, 0.000243921, 0.000255341, 0.000217157, 0.000211346, 0.000145938, 0.000150137, 0.000172272, 0.000173192, 0.000198759, 0.000207638, 0.000199659, 0.000175232, 0.000215234, 0.000245828, 0.000256368, 0.000246266, 0.000216528, 0.000225838, 0.000253284, 0.000261141, 0.000251576, 0.000223944, 0.000218817, 0.000238539, 0.000239016, 0.000229544, 0.000207447, 0.000194008, 0.00020751, 0.000199338, 0.00018358, 0.000166333, 0.000130278, 0.000135178, 0.000125857, 0.000117616, 0.000109533],
        9: [0.000266755, 0.000314229, 0.000328014, 0.000315004, 0.000270069, 0.000323956, 0.000372981, 0.000381124, 0.000367889, 0.000320678, 0.000343005, 0.000372982, 0.000341696, 0.000340921, 0.000315553, 0.000368977, 0.000432172, 0.0004357, 0.000350267, 0.000303635, 0.000377153, 0.000442724, 0.000448484, 0.000395156, 0.000320179, 0.000340622, 0.000378969, 0.000337844, 0.000257973, 0.000246222, 0.00017028, 0.000194476, 0.000202384, 0.000194267, 0.000170423, 0.000211716, 0.000238242, 0.000245617, 0.0002354, 0.000207867, 0.000230226, 0.000253768, 0.000255465, 0.000242568, 0.000215711, 0.000243841, 0.000272876, 0.000274755, 0.000252107, 0.000217393, 0.000239307, 0.000268914, 0.000270706, 0.000247269, 0.000209642, 0.000194571, 0.000213864, 0.00020752, 0.000185673, 0.000159581],
        10: [0.000288205, 0.000339244, 0.000354232, 0.000339516, 0.000291242, 0.000366295, 0.00043271, 0.000449239, 0.000419859, 0.000357771, 0.000404375, 0.000487693, 0.000514361, 0.000438871, 0.000377922, 0.000409707, 0.000493482, 0.000538682, 0.000539028, 0.000446929, 0.000383138, 0.000465729, 0.00051183, 0.000511088, 0.000427581, 0.000302415, 0.000373828, 0.000411073, 0.000393623, 0.00032083, 0.000188508, 0.000215383, 0.000224309, 0.000215135, 0.000188876, 0.000243999, 0.000279179, 0.000289933, 0.000275321, 0.000240394, 0.000273388, 0.000314486, 0.000327504, 0.000308703, 0.000269045, 0.000278035, 0.000322864, 0.000343232, 0.000332167, 0.000290579, 0.000255145, 0.000298781, 0.000320115, 0.000311839, 0.000272229, 0.000194844, 0.000228739, 0.000244303, 0.000235818, 0.000204332],
        11: [0] * 60,
        12: [0] * 60,
        13: [0] * 60
    })
    return data

# 加载数据
data = load_data()
data.set_index("标测电极", inplace=True)

# 侧边栏
with st.sidebar:
    st.header("标测电极")

    # 选择标测电极 A 和 B
    electrode_a = st.slider("标测电极A", 1, 60, 30, 1, key="electrode_a")
    electrode_b = st.slider("标测电极B", 1, 60, 30, 1, key="electrode_b")

    # 允许用户手动调整 Y 轴范围（使用字符串输入）
    fixed_y_min_str = st.text_input("固定 Y 轴最小值", value="-0.00040")
    fixed_y_max_str = st.text_input("固定 Y 轴最大值", value="0.00060")

    # 将字符串转换为浮点数
    try:
        fixed_y_min = float(fixed_y_min_str)
        fixed_y_max = float(fixed_y_max_str)
    except ValueError:
        st.error("请输入有效的数字！")
        fixed_y_min = -0.00040
        fixed_y_max = 0.00060

    # 显示用户输入的 Y 轴范围
    st.write(f"当前 Y 轴范围：{fixed_y_min} 到 {fixed_y_max}")

    # 调整 X 轴紧凑度的滑动条
    x_spacing = st.slider(
        "X 轴紧凑度",
        min_value=0.1,
        max_value=1.0,
        value=0.5,
        step=0.1,
        key="x_spacing"
    )

    # 显示具体数值的按钮
    show_values = st.button("显示具体数值")

# 计算差值
diff_a = data.loc[electrode_a]
diff_b = data.loc[electrode_b]
diff_ab = diff_a - diff_b  # 计算 A-B 差值

# 时间序列图
st.header("时间序列图")

# 动态调整图像宽度
fig_width = 10 * x_spacing  # 根据 x_spacing 动态调整图像宽度
fig, axes = plt.subplots(3, 1, figsize=(fig_width, 10))  # 不共享 X 轴和 Y 轴

# 动态调整 X 轴范围
x_values = np.arange(len(data.columns)) * x_spacing  # 根据 x_spacing 调整 X 轴范围
titles = [f"电极 {electrode_a}", f"电极 {electrode_b}", f"电极 {electrode_a} - {electrode_b}"]
data_series = [diff_a, diff_b, diff_ab]

# 遍历子图，绘制曲线并确保 Y 轴固定
for ax, title, series in zip(axes, titles, data_series):
    ax.plot(x_values, series, marker="o", markersize=4, linewidth=1.5)
    ax.set_title(title, fontsize=10)
    ax.set_ylabel("值")  # 统一 Y 轴标签
    ax.yaxis.set_major_formatter(FormatStrFormatter('%.8f'))  # Y 轴保留 8 位小数
    ax.set_xticks(x_values)  # 设置 X 轴刻度
    ax.set_xticklabels(data.columns, rotation=90, fontsize=8)  # X 轴标签垂直显示
    ax.grid(True, linestyle="--", alpha=0.6)
    ax.set_ylim(fixed_y_min, fixed_y_max)  # Y 轴使用固定范围

# 调整子图间距
plt.tight_layout()

# 显示图表
st.pyplot(fig)

# 显示具体数值（横排显示）
if show_values:
    st.subheader("具体数值）")

    # 将数据转换为横排格式，并保留 8 位小数
    df_a = pd.DataFrame({f"时间点 {col}": [diff_a[col]] for col in data.columns}).T.round(8)
    df_b = pd.DataFrame({f"时间点 {col}": [diff_b[col]] for col in data.columns}).T.round(8)
    df_ab = pd.DataFrame({f"时间点 {col}": [diff_ab[col]] for col in data.columns}).T.round(8)

    # 显示表格
    st.write("电极 A ：")
    st.dataframe(df_a.style.format("{:.8f}"))  # 确保显示 8 位小数

    st.write("电极 B ：")
    st.dataframe(df_b.style.format("{:.8f}"))  # 确保显示 8 位小数

    st.write("电极 A-B 差值：")
    st.dataframe(df_ab.style.format("{:.8f}"))  # 确保显示 8 位小数